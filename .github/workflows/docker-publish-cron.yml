name: 'Build and Push Docker Image'
on:
  workflow_dispatch:
  schedule:
    # weekly
    - cron: '0 0 * * 0'

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      target-release: ${{ steps.redasql.outputs.release }}
      self-release: ${{ steps.self.outputs.release }}
    steps:
      - id: redasql
        uses: pozetroninc/github-action-get-latest-release@v0.6.0
        with:
          owner: denzow
          repo: redasql
          excludes: prerelease, draft
      - id: self
        uses: pozetroninc/github-action-get-latest-release@v0.6.0
        with:
          repository: ${{ github.repository }}

  build-and-push:
    runs-on: ubuntu-latest
    needs:
      - check-release
    if: ${{ needs.check-release.outputs.target-release != needs.check-release.outputs.self-release }}
    steps:
      - uses: actions/checkout@v3
      - name: echo releases
        run: |
          echo target-release:${{ needs.check-release.outputs.target-release }}
          echo self-release:${{ needs.check-release.outputs.self-release }}

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/${GITHUB_REPOSITORY#*/}
          VERSION=${{ needs.check-release.outputs.target-release }}
          SHORTREF=${GITHUB_SHA::8}

          TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${SHORTREF}"

          # If the VERSION looks like a version number, assume that
          # this is the most recent version of the image and also
          # tag it 'latest'.
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi

          # Set output parameters.
          echo ::set-output name=tags::${TAGS}
    
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          platforms: linux/amd64,linux/arm64,linux/ppc64le
          tags: ${{ steps.prep.outputs.tags }}
          build_args: REDASQL_VERSION=${{ needs.check-release.outputs.target-release }}

  create-tag-and-release:
    runs-on: ubuntu-latest
    needs:
      - check-release
      - build-and-push
    steps:
      - uses: actions/checkout@v3

      - name: Create Tag
        id: create-tag
        run: |
          echo ${{ needs.check-release.outputs.target-release }} > TAG_NAME
          git tag $(cat TAG_NAME)
          git push origin $(cat TAG_NAME)
          echo "::set-output name=tag-name::$(cat TAG_NAME)"
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create-tag.outputs.tag-name }}
          release_name: Release ${{ steps.create-tag.outputs.tag-name }}
          body: The image was pushed to DockerHub
          draft: false
          prerelease: false